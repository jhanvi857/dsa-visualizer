{
  "Pair sum \nproblem": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.You may assume that each input would have exactly one solution, and you may not use the same element twice.You can return the answer in any order.\n\n\nexample:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].",
  "Stock buy & \nSell": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n\n\nexample:\nInput: prices = [7,1,5,3,6,4]\nOutput: 5",
  "Container with most water": "You are given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai).\n n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0).\nFind two lines that together with the x-axis form a container that holds the most water.\n\n\nexample:\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49",
  "Product of array except itself": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\nYou must solve it without using division and in O(n).\n\n\nexample:\nInput: nums = [1,2,3,4]\nOutput: [24,12,8,6]",
  "Search in rotated sorted array": "There is an integer array nums sorted in ascending order (with distinct values), and is rotated at an unknown pivot.Given the array nums after rotation and an integer target, return the index of target if it is in nums, or -1 otherwise.\n\n\nexample:\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4",
  "Peak index in mountain array": "An array arr is a mountain if:\n1. arr.length >= 3\n2. There exists some i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1]\nGiven a mountain array arr, return the index i such that arr[i] is the peak.\n\n\nexample:\nInput: arr = [0,2,3,4,5,2,1,0]\nOutput: 4",
  "Single element in sorted array": "You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.\nReturn the single element that appears only once.\n\n\nexample:\nInput: nums = [1,1,2,3,3,4,4,8,8]\nOutput: 2",
  "Book allocation \nproblem": "Given an array of integers A of size N where A[i] represents the number of pages in the ith book. There are M students.Books are arranged in a sequence. Each student is assigned a contiguous sequence of books.\nMinimize the maximum number of pages assigned to a student.\n\n\nexample:\nInput: A = [12, 34, 67, 90], M = 2\nOutput: 113",
  "Sort an array with 0s 1s and 2s": "Given an array nums with n objects colored red (0), white (1), or blue (2), sort them in-place so that objects of the same color are adjacent.\nUse constant space and one pass.\n\n\nexample:\nInput: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]",
  "Merge two sorted arrays": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order.\nMerge nums2 into nums1 as one sorted array.\n\n\nexample:\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]",
  "Next permutation": "Given an array of integers nums, rearrange it as the next lexicographically greater permutation of numbers.\nIf such an arrangement is not possible, rearrange it as the lowest possible order (i.e., sorted in ascending order).\n\n\nexample:\nInput: nums = [1,2,3]\nOutput: [1,3,2]",
  "Valid palindrome": "Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nexample:\ns = \"A man, a plan, a canal: Panama\"\nOutput: true",
  "Remove all occurances": "Given a string s and a character ch, remove all occurrences of ch from s.\n\nexample:\ns = \"abcabc\", ch = \"a\"\nOutput: \"bcbc\"",
  "permutation in string": "Given two strings s1 and s2, return true if s2 contains a permutation of s1.\n\nexample:\ns1 = \"ab\", s2 = \"eidbaooo\"\nOutput: true",
  "Reverse words in a string": "Given an input string s, reverse the order of the words. Words are separated by spaces.\n\nexample:\ns = \"the sky is blue\"\nOutput: \"blue is sky the\"",
  "string \ncompression": "Given an array of characters, compress it in-place. Replace sequences of the same character with the character followed by the count.\n\nexample:\nInput: ['a','a','b','b','c','c','c']\nOutput: ['a','2','b','2','c','3']",
  "Search in a 2D matrix": "Write an efficient algorithm to search a value in a m x n matrix. Rows are sorted and first integer of each row is greater than last of previous row.\n\nexample:\nInput: matrix = [[1,3,5],[7,9,11]], target = 3\nOutput: true",
  "Reverse a \nLinked list": "Reverse a singly linked list.\n\nexample:\nInput: 1 -> 2 -> 3 -> null\nOutput: 3 -> 2 -> 1 -> null",
  "Middle of a \nlinked list": "Given a singly linked list, return the middle node.\n\nexample:\nInput: 1->2->3->4->5\nOutput: 3",
  "Detect and remove cycle": "Detect if a cycle exists in a linked list and remove it.\n\nexample:\nInput: List with a loop\nOutput: Loop removed, return head of acyclic list",
  "Merge two \nsorted lists": "Merge two sorted linked lists into one sorted list.\n\nexample:\nInput: 1->2->4, 1->3->4\nOutput: 1->1->2->3->4->4",
  "LRU Cache": "Design and implement a data structure for Least Recently Used (LRU) cache.\n\nexample:\nInput: LRUCache(2); put(1,1); put(2,2); get(1); put(3,3); get(2)\nOutput: 1, -1",
  "traversals of binary tree": "Return the level order traversal of a binary tree.\n\nexample:\nInput: [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]",
  "Diameter of Binary Tree": "Find the diameter (longest path between any two nodes) of a binary tree.\n\nexample:\nInput: [1,2,3,4,5]\nOutput: 3",
  "Longest Common Subsequence": "Find the length of the longest subsequence present in both the sequences.\n\nexample:\nInput: s1 = \"abcde\", s2 = \"ace\"\nOutput: 3",
  "Coin Change": "Find the minimum number of coins needed to make a given amount.\n\nexample:\ncoins = [1,2,5], amount = 11\nOutput: 3",
  "Huffman Encoding": "Given frequencies of characters, build a Huffman tree and print the codes.\n\nexample:\nchar = [a,b,c,d,e,f], freq = [5,9,12,13,16,45]\nOutput: Huffman Codes",
  "Cycle Detection in Undirected Graph": "Detect if there is a cycle in an undirected graph using DFS or BFS.\n\nexample:\nInput: V = 5, edges = [...]\nOutput: true"
}